{"version":3,"file":"Contact-C8hozGsq.js","sources":["../../src/validation/assessment.ts","../../src/components/ui/LoadingState.tsx","../../src/pages/Contact.tsx"],"sourcesContent":["import { z } from 'zod';\n\nexport const assessmentSchema = z.object({\n  industry: z.string().min(1, 'Industry is required'),\n  processComplexity: z.enum(['Low', 'Medium', 'High'], {\n    required_error: 'Process complexity is required',\n  }),\n  manualProcesses: z.array(z.string()).min(1, 'At least one manual process is required'),\n  companySize: z.enum(['1-10', '11-50', '51-200', '201-1000', '1000+']),\n  goals: z.array(z.string()).min(1, 'At least one goal is required'),\n  budget: z.enum(['0-10k', '10k-50k', '50k-200k', '200k+']),\n  timeline: z.enum(['1-3 months', '3-6 months', '6-12 months', '12+ months']),\n});\n\nexport const contactSchema = z.object({\n  name: z.string().min(2, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  message: z.string().min(10, 'Message must be at least 10 characters'),\n  company: z.string().optional(),\n  phone: z.string().optional(),\n});\n\nexport type AssessmentFormData = z.infer<typeof assessmentSchema>;\nexport type ContactFormData = z.infer<typeof contactSchema>;\n","import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingStateProps {\n  message?: string;\n  fullScreen?: boolean;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst LoadingState: React.FC<LoadingStateProps> = ({\n  message = 'Loading...',\n  fullScreen = false,\n  className,\n  size = 'md',\n}) => {\n  const containerClasses = fullScreen\n    ? 'fixed inset-0 flex items-center justify-center bg-white bg-opacity-90 z-50'\n    : 'flex flex-col items-center justify-center p-4 min-h-[200px]';\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8',\n    lg: 'w-12 h-12'\n  };\n\n  return (\n    <div className={cn(containerClasses, className)}>\n      <div \n        className={cn(\n          'animate-spin rounded-full border-4 border-primary border-t-transparent',\n          sizeClasses[size]\n        )}\n        role=\"status\"\n        aria-label=\"Loading\"\n      />\n      {message && <p className=\"text-gray-600 text-sm\">{message}</p>}\n    </div>\n  );\n};\n\nexport default LoadingState;\n\nexport { LoadingState };\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { contactSchema, type ContactFormData } from '@/validation/assessment';\nimport { ErrorBoundary } from '@/components/error/ErrorBoundary';\nimport { LoadingState } from '@/components/ui/LoadingState';\nimport { Helmet } from 'react-helmet-async';\n\nconst Contact: React.FC = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n  });\n\n  const onSubmit = async (data: ContactFormData) => {\n    try {\n      // TODO: Implement API call\n      console.log('Form data:', data);\n      reset();\n    } catch (error) {\n      console.error('Error submitting form:', error);\n    }\n  };\n\n  if (isSubmitting) {\n    return <LoadingState message=\"Sending message...\" />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Contact Us - Ad Astra Process Optimus</title>\n        <meta name=\"description\" content=\"Get in touch with us for your process automation needs\" />\n      </Helmet>\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-4xl font-bold mb-6\">Contact Us</h1>\n        <p className=\"text-lg mb-8\">\n          We're here to help with your process automation journey. Reach out to us today.\n        </p>\n        <div className=\"max-w-2xl\">\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                {...register('name')}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email *\n              </label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                {...register('email')}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              />\n              {errors.email && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700\">\n                Company\n              </label>\n              <input\n                type=\"text\"\n                id=\"company\"\n                {...register('company')}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700\">\n                Message *\n              </label>\n              <textarea\n                id=\"message\"\n                rows={4}\n                {...register('message')}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              />\n              {errors.message && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.message.message}</p>\n              )}\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n              >\n                Send Message\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Contact;"],"names":["z","contactSchema","LoadingState","message","fullScreen","className","size","containerClasses","sizeClasses","cn","jsx","Contact","register","handleSubmit","errors","isSubmitting","reset","useForm","zodResolver","onSubmit","data","error","jsxs","Fragment","Helmet"],"mappings":"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"}